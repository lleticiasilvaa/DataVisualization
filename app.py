import streamlit as st

st.set_page_config(page_title='üë©‚Äçüíªüí∏', layout='wide') #üí∞ü§ë

# Define the pages
main_page = st.Page("main_page.py", title="An√°lise", icon="üìä")
page_2 = st.Page("page_2.py", title="GPU", icon="üñ•Ô∏è")
page_3 = st.Page("page_3.py", title="API", icon="‚öôÔ∏è")
page_4 = st.Page("page_4.py", title="Estrat√©gia", icon="üß†")

# Set up navigation
pg = st.navigation([main_page, page_2, page_3, page_4])

# Run the selected page
pg.run()


# import streamlit as st
# import pandas as pd
# import numpy as np
# import plotly.express as px

# def tokens_to_price(input_tokens, output_tokens, price_input, price_output):
#     return input_tokens / 1_000_000 * price_input + output_tokens / 1_000_000 * price_output

# st.set_page_config(page_title='üë©‚Äçüíªüí∏', layout='wide')
# st.title("Compensa pagar por uma GPU remota?")

# # --- Navega√ß√£o ---
# st.sidebar.title("Navega√ß√£o")
# page = st.sidebar.radio("Escolha uma p√°gina", ["üìä An√°lise", "‚ûï Cadastrar API", "‚ûï Cadastrar GPU", "‚ûï Cadastrar Estrat√©gia"])

# # --- P√°gina 1: An√°lise ---
# if page == "üìä An√°lise":
#     st.sidebar.header("üñ•Ô∏è GPU - Configura√ß√£o")
#     instance_name = st.sidebar.text_input("Nome da Inst√¢nica", value='Oracle-NVIDIA A10')
#     gpu_hour_price = st.sidebar.number_input("Pre√ßo por Hora da GPU (R$)", value=11.10, min_value=0.0)
#     gpu_memory_total = st.sidebar.number_input("Mem√≥ria Total da GPU (GB)", value=24.0, min_value=0.1)

#     st.sidebar.header("‚öôÔ∏è API")
#     st.sidebar.subheader("Pre√ßo por Milh√£o de Tokens")
#     model_name = st.sidebar.text_input("Nome do Modelo", value='gpt-4o-mini')
#     price_input = st.sidebar.number_input("Tokens de Entrada (R$)", value=0.60, min_value=0.0)
#     price_output = st.sidebar.number_input("Tokens de Sa√≠da (R$)", value=2.50, min_value=0.0)

#     st.sidebar.header("üß† Estrat√©gia")
#     model_memory = st.sidebar.number_input("Mem√≥ria Ocupada pelo Modelo (GB)", value=12.0, min_value=0.1)
#     request_time = st.sidebar.number_input("Tempo por Requisi√ß√£o (seg)", value=1.0, min_value=0.1)
#     input_tokens = st.sidebar.number_input("Tokens de Entrada por Requisi√ß√£o", value=800)
#     output_tokens = st.sidebar.number_input("Tokens de Sa√≠da por Requisi√ß√£o", value=1200)

#     st.subheader("üìä An√°lise de Custo por Requisi√ß√£o")

#     if model_memory > gpu_memory_total:
#         st.error("Erro: o modelo ocupa mais mem√≥ria do que a dispon√≠vel na GPU.")
#     else:
#         concurrent_models = int(gpu_memory_total // model_memory)
#         max_reqs_per_model = int(3600 // request_time)
#         max_reqs_total = concurrent_models * max_reqs_per_model

#         st.markdown(f"""
#         - **Modelos simult√¢neos na GPU:** {concurrent_models}  
#         - **M√°x. requisi√ß√µes por modelo/hora:** {max_reqs_per_model}  
#         - **M√°x. requisi√ß√µes totais por hora:** {max_reqs_total}
#         """)

#         x = list(range(1, max_reqs_total + 1))
#         y_gpu = [gpu_hour_price / r for r in x]
#         y_api = [tokens_to_price(input_tokens, output_tokens, price_input, price_output)] * len(x)

#         df_plot = pd.DataFrame({
#             "Requisi√ß√µes por hora": x + x,
#             "Custo (R$/req)": y_gpu + y_api,
#             "Origem": [instance_name] * len(x) + [model_name] * len(x)
#         })

#         fig = px.line(df_plot, x="Requisi√ß√µes por hora", y="Custo (R$/req)", color="Origem",
#                       log_x=True, log_y=True,
#                       title="Custo por Requisi√ß√£o: GPU remota vs API")

#         diff = np.array(y_gpu) - np.array(y_api)
#         cross_indices = np.where(np.diff(np.sign(diff)))[0]

#         if len(cross_indices) > 0:
#             idx = cross_indices[0]
#             x_cross = x[idx]
#             y_cross = y_gpu[idx]
#             fig.add_scatter(x=[x_cross], y=[y_cross], mode='markers+text',
#                             marker=dict(color='black', size=10),
#                             text=[f"{x_cross} req/h"], textposition="top center",
#                             name="Ponto de cruzamento")

#         st.plotly_chart(fig, use_container_width=True)

# # --- P√°gina 2: Cadastrar API ---
# elif page == "‚ûï Cadastrar API":
#     st.subheader("Cadastro de Modelo de API")
#     model_name = st.text_input("Nome do Modelo")
#     price_input = st.number_input("Pre√ßo por milh√£o de tokens de entrada (R$)", min_value=0.0)
#     price_output = st.number_input("Pre√ßo por milh√£o de tokens de sa√≠da (R$)", min_value=0.0)
#     if st.button("Salvar API"):
#         st.success(f"Modelo {model_name} cadastrado com sucesso!")

# # --- P√°gina 3: Cadastrar GPU ---
# elif page == "‚ûï Cadastrar GPU":
#     st.subheader("Cadastro de Inst√¢ncia de GPU")
#     instance_name = st.text_input("Nome da Inst√¢ncia")
#     gpu_hour_price = st.number_input("Pre√ßo por Hora da GPU (R$)", min_value=0.0)
#     gpu_memory_total = st.number_input("Mem√≥ria Total da GPU (GB)", min_value=0.1)
#     if st.button("Salvar GPU"):
#         st.success(f"GPU {instance_name} cadastrada com sucesso!")

# # --- P√°gina 4: Cadastrar Estrat√©gia ---
# elif page == "‚ûï Cadastrar Estrat√©gia":
#     st.subheader("Cadastro de Estrat√©gia")
#     model_memory = st.number_input("Mem√≥ria do modelo (GB)", min_value=0.1)
#     request_time = st.number_input("Tempo por requisi√ß√£o (seg)", min_value=0.1)
#     input_tokens = st.number_input("Tokens de Entrada por Requisi√ß√£o", value=800)
#     output_tokens = st.number_input("Tokens de Sa√≠da por Requisi√ß√£o", value=1200)
#     if st.button("Salvar Estrat√©gia"):
#         st.success("Estrat√©gia cadastrada com sucesso!")


